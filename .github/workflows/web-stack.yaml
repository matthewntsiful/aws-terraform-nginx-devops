name: Terraform CI/CD

on:
    push:
      branches: [main]
      paths-ignore:
        - 'README.md'
        - '.gitignore'
        - 'docs/**'
        - '*.md'
        - '.github/ISSUE_TEMPLATE/**'
        - 'scripts/**'
        # Add any other files or directories you want to ignore
    pull_request:
      branches: [main]
      paths-ignore:
        - 'README.md'
        - '.gitignore'
        - 'docs/**'
        - '*.md'
        - '.github/ISSUE_TEMPLATE/**'
        - 'scripts/**'
    workflow_dispatch:
      inputs:
        action:
          description: 'Choose action to perform'
          required: true
          default: 'apply'
          type: choice
          options:
            - apply
            - destroy
        confirm_destroy:
          description: 'Type "destroy" to confirm infrastructure destruction'
          required: false
          default: ''
          type: string
env:
  TF_VERSION: '1.7.5'

jobs:
  terraform:
    name: Terraform Format, Validate & Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

  apply:
    name: Terraform Apply
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && (
        github.event_name == 'push' || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      )

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy == 'destroy'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Backup State
        run: |
          echo "Creating state backup..."
          terraform state pull > state-backup-$(date +%Y%m%d-%H%M%S).json

      - name: Terraform Destroy Plan
        run: terraform plan -destroy -out=destroy-plan

      - name: Terraform Destroy
        run: |
          echo "üö® DESTROYING INFRASTRUCTURE üö®"
          terraform apply -auto-approve destroy-plan
          echo "‚úÖ Infrastructure destroyed successfully"

  # Safety check job that fails if destroy is attempted without proper confirmation
  destroy_safety_check:
    name: Destroy Safety Check
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'destroy' &&
      github.event.inputs.confirm_destroy != 'destroy'

    steps:
      - name: Safety Check Failed
        run: |
          echo "‚ùå DESTROY BLOCKED: Confirmation required"
          echo "To destroy infrastructure, you must:"
          echo "1. Select 'destroy' action"
          echo "2. Type 'destroy' in the confirmation field"
          echo "3. This is a safety measure to prevent accidental destruction"
          exit 1

        #End of the workflow file